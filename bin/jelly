#!/usr/bin/env node

// do the following:
// 1. export PATH=PATH_TO_JELLY/jelly:$PATH
// AND either -
// 2a. alias j=jelly (in .profile, .bash_profile, .bashrc, or appropriate) OR
// 2b. ln jelly j

var fs = require("fs")
  , exec = require("child_process").exec
  , spawn = require("child_process").spawn
  , path = require("path");

var version = "0.0.1"
  , app_path;

/* default engines */
var template_engine = "jade"
  , supported_template_engines = [ "jade" ]
  , database_engine = "mongodb"
  , supported_database_engines = [ "mongodb" ];

var usage = [
    ""
  , "  Usage: jelly <command> [app_path] [options]"
  , ""
  , "  Commands:"
  , "    new <app_path>           create a new jelly application at app_path"
  , "    s, server                start node server for current jelly application"
  , "    g, generate              utilities for generating various types of modules"
  , ""
  , "  Options:"
  , "    -d, --database <engine>  select database engine (mongodb|...). default=mongodb"
  , "    -t, --template <engine>  select template engine (jade|...). default=jade"
  , "    -v, --version            show jelly version number and quit"
  , "    -h, --help               show this help message and quit"
  , ""
].join("\n");

var readme = "*empty*" // TODO -- make something like Rails README
  , robots = [
      "# See http://www.robotstxt.org/wc/norobots.html for documentation on how to use the robots.txt file"
    , "# To ban all spiders from the entire site uncomment the next two lines:"
    , "# User-Agent: *"
    , "# Disallow: /"
  ].join("\n");

var jade_layout = [
    "!!! 5"
  , "html"
  , "  head"
  , "    title= title"
  , "    link(rel=\"stylesheet\", href=\"/stylesheets/style.css\")"
  , "  body!= yield"
].join("\n");

var index_html = [
    "<!DOCTYPE html>"
  , "<html>"
  , "<head>"
  , "  <title>Jelly default index.html</title>"
  , "</head>"
  , "<body>"
  , "  <h1>Jelly default index.html</h1>"
  , "  <p>Here are some things you should do to get started really quickly:</p>"
  , "  <ul>"
  , "    <li>Use built-in generators to develop quickly -- ex: <code>jelly generate controller post index new edit</code>.</li>"
  , "    <li>Check <code>APP_NAME/config/routes.json</code> frequently or type <code>jake routes</code> to check what the Jelly router tries to route various URLs to.</li>"
  , "    <li>Check out the <code>README.md</code> file or go to <a href=\"#\">http://github.com/tjko/jelly</a> for more info.</li>"
  , "  </ul>"
  , "<p>Of course, deleting this file is a good start! (<code>APP_NAME/public/index.html</code>)</p>"
  , "</body>"
  , "</html>"
].join("\n");

var css = "/* this isn't a css framework! =] */\n";

var app = [
    "var connect = require(\"connect\");"
  , "app = require(\"jelly\");"
  , ""
  , "app.bootstrap(__dirname, function () {"
  , "  connect("
  , "    connect.logger()"
  , "  , app.router.setup()"
  , "  ).listen(3000);"
  , "  console.log(\"Listening on port 3000\");"
  , "});"
  , ""
].join("\n");

var routes = "{\n}\n";

// TODO -- capitalize and append Controller to name?
var gen_controller = function(controller_name, action_names) {
  var content = [
      "function " + controller_name + "() {"
    , ""
  ].join("\n");
  action_names.forEach(function(val, index, arr) {
    content += "  this." + val + " = function(res) {\n\n  };\n";
  });
  content += "}\n\nvar expose = new " + controller_name + "();\nexpose.__proto__ = app.base_controller;\nmodule.exports = expose;\n";
  // TODO -- jelly.controllers_dir not supported!!! binary versus jelly object...
  // TODO -- check if there, otherwise warn we can't use generators
  write("app/controllers/" + controller_name + ".js", content);
};

var gen_routes = function(controller_name, actions) {
// TODO -- just make "/controller_name/action_name": "controller_name#action_name"
// json parse routes.json, TODO HERE
};

var args = process.argv.slice(2)
  , cmd, generator, arg;

if (args.length == 0) abort(usage);

while (args.length) {
  arg = args.shift();
  switch (arg) {
    /* OUT-DIR COMMAND */
    case "new":
      args.length
        ? new_app(args.shift())
        : abort("Missing required parameter: app_path.");
      break;
    /* all command below must be executed in jelly app directory */
    /* IN-DIR COMMANDS START ----------------------------------- */
    case "server":
    case "s":
      start_server();
      // TODO -- may have options after like --port or something?
      break;
    case "generate":
    case "g":
      if (args.length) {
        /* examples:
         *   generate model model_name attr_1:type_1 attr_2:type_2 ...
         *   generate controller controller_name action_1 action_2 ...
         *   generate view view_folder view_name_1 view_name_2 ...
         *   generate migration migration_name attr_1 attr_2 ...
         */
        generate(args.shift(), args);
        args.length = 0;
      } else {
        abort("Missing required parameter: generator_type.");
      }
      break;
    /* IN-DIR COMMANDS END ------------------------------------- */
    /* Options START */
    case "-d":
    case "--database":
      if (args.length) {
        database_engine = args.shift();
        if (supported_database_engines.indexOf(database_engine) == -1) {
          abort("Unsupported database engine: " + database_engine + ".");
        }
      } else {
        abort("Missing required parameter: database_engine.");
      }
      break;
    case "-t":
    case "--template":
      if (args.length) {
        template_engine = args.shift();
        if (supported_template_engines.indexOf(template_engine) == -1) {
          abort("Unsupported template engine: " + template_engine + ".");
        }
      } else {
        abort("Missing required parameter: template_engine.");
      }
      break;
    case "-v":
    case "--version":
      abort("Jelly " + version);
      break;
    case "-h":
    case "--help":
    default:
      abort(usage);
  }
}

function start_server() {
  var node = spawn("node", ["app.js"]);
  node.stdout.on("data", function(data) {
    process.stdout.write(data.toString());
  });
  node.stderr.on("data", function(data) {
    process.stderr.write(data.toString());
  });
}

function new_app(app_path) {
  fs.readdir(app_path, function(err, files) {
    err // file doesn't exist, proceed
      ? create_app(app_path)
      : confirm("A jelly app exists in this directory, continue? ",
        function(yes) {
          if (yes) {
            process.stdin.destroy();
            create_app();
          } else {
            abort("Aborting.");
          }
        });
  });
}

function create_app(app_path) {
  mkdir(app_path, function() {
    write(app_path + "/README", readme);
    mkdir(app_path + "/app/controllers");
    mkdir(app_path + "/app/helpers");
    mkdir(app_path + "/app/models");
    mkdir(app_path + "/app/views", function() {
      mkdir(app_path + "/app/views/layouts", function() {
        switch (template_engine) {
        case "jade":
          write(app_path + "/app/views/layouts/app.jade", jade_layout);
          break;
        }
      });
    });
    mkdir(app_path + "/config", function() {
      write(app_path + "/config/routes.json", routes);
    });
    mkdir(app_path + "/db");
    // TODO -- make db stuff
    // schema.json ? + /db/migrations/
    mkdir(app_path + "/log", function() {
      write(app_path + "/log/access.log", "");
    });
    mkdir(app_path + "/public", function() {
      //write(app_path + "/public/404.html", four04);
      write(app_path + "/public/index.html", index_html);
      write(app_path + "/public/robots.txt", robots);
      // TODO -- make the strings above
      mkdir(app_path + "/public/images");
      mkdir(app_path + "/public/javascripts");
      mkdir(app_path + "/public/stylesheets");
    });
    // TODO -- put anything in node modules? -- ship with jade and default db engine?
    mkdir(app_path + "/node_modules");
    write(app_path + "/app.js", app)
  });
}

function generate(generator, args) {
  var next_param, exists;
  switch (generator) {
    case "model":
      console.log("unimplemented.");
      break;
    case "controller":
      // TODO -- prompt about generating explicit routes
      if (args.length) {
        next_param = args.shift();
        exists = path.existsSync("app/controllers/" + next_param + ".js");
        (exists)
          ? confirm("This controller already exists. continue? ",
            function(yes) {
              if (yes) {
                process.stdin.destroy();
                gen_controller(next_param, args)
              } else {
                abort("Aborting.");
              }
            })
          : gen_controller(next_param, args);
        // TODO -- if we're here -- we generate controller successfully, now generate routes?
        gen_routes(next_param, args);
      } else {
        abort("Missing required parameter: controller_name.");
      }
      break;
    case "migration":
      console.log("unimplemented.");
      break;
    default:
      abort("The generator does not exist: " + generator + ".");
  }
}

function confirm(msg, fn) {
  prompt(msg, "n", function(input) {
    fn(/^ *y(es)?/i.test(input));
  });
}

function prompt(msg, defaults, fn) {
  process.stdout.write(msg + "[" + defaults + "] ");
  process.stdin.resume();
  process.stdin.setEncoding("ascii"); // do this every time?
  process.stdin.once("data", function(data) {
    fn(data || defaults);
  });
}

function mkdir(path, fn) {
  exec("mkdir -p "+path, function(err) {
    if (err) throw err;
    console.log("   \x1b[32m\x1b[1mcreate\x1b[0m    " + path)
    fn && fn();
  });
}

function write(path, content) {
  fs.writeFile(path, content);
  console.log("   \x1b[32mcreate\x1b[0m    " + path)
}

function abort(message) {
  console.error(message);
  process.exit(1);
}
